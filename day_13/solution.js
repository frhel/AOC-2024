// ************ Initalization Stuff ************
import fs from 'fs'; // File system module
import chalk from 'chalk'; // Colorizes console output

// Define Generic Global Variables
const _DAY = '13'; // Auto-generated by create.sh script. See README.md for details: https://github.com/frhel/AOC-2024/blob/main/README.md

const _FILE = process.argv[2] || 'in.txt'; // Default input file0 for problem input, 1 for example. Default is 1 for example
const _TIMERS = {'global': performance.now(), 'part_1': '', 'part_2': ''}; // Object to keep track of individual timers
const _OUTPUT_LENGTH = 50; // The length of the output line
const _ANSWERS = {};

printDayTitlePlate(_DAY); // Print a plate with the day of the challenge

// ************ End of Initalization ***********

// ************ Main Logic Stuff ************
let input = readInputFile();
let data = parseInput(input);


_TIMERS.part_1 = performance.now(); // Start the timer for part 1
_ANSWERS.part1 = solvePart1(data);
logAnswer(_ANSWERS.part1, 1);

_TIMERS.part_2 = performance.now(); // Start the timer for part 2
_ANSWERS.part2 = solvePart2(data);
logAnswer(_ANSWERS.part2, 2);

printTotalTime();

// ************ Solution Functions ************
/**
 * Solves part 1 of the challenge and logs the answer to the console
 * @param {Array} data - The parsed input data
 */
function solvePart1(data) {

	// I don't know math, so I brute forced part 1

	let answer = 0;

	for (let machine of data) {
		let target = machine.target;
		let count = 100;
		let a = 0;
		let b = count;

		machine.results = []

		let moves = {a: 0, b: 0};
		let current = {x: 0, y: 0};

		for (let i = a; i < count; i++) {

			moves.b = 0;
			current.x = machine.a.X * i;
			current.y = machine.a.Y * i;
			if (current.x === target.X && current.y === target.Y) {
				machine.results.push({...moves});
				break;
			}
			current.x += machine.a.X;
			current.y += machine.a.Y;
			moves.a++;

			for (let j = b; j > 0; j--) {
				if (current.x === target.X && current.y === target.Y) {
					machine.results.push({...moves});
					break;
				}
				current.x += machine.b.X;
				current.y += machine.b.Y;
				moves.b++;
				// console.log(moves, current, target)
			}
		}
		if (machine.results.length > 0) {
			answer += Math.max(machine.results.map(result => result.a * 3 + result.b))
		}
	}


	return answer;
}

/**
 * Solves part 2 of the challenge and logs the answer to the console
 * @param {Array} data - The parsed input data
 */
function solvePart2(data) {

	let answer = 0;
	for (let machine of data) {
		let target = machine.target;
		target.X = target.X + 10000000000000;
		target.Y = target.Y + 10000000000000;

		// I don't know maths so I ended up looking at spoilers to find out that
		// this is a linear equation problem and that Cramer's Rule can be used to solve it
		// Then I went through some examples to try to understand it
		// Then I made some sort of solution that seems to work
		let det = (machine.a.X * machine.b.Y) - (machine.a.Y * machine.b.X);

		let det1 = target.X * machine.b.Y - target.Y * machine.b.X;
		let det2 = machine.a.X * target.Y - machine.a.Y * target.X;

		let countA = det1 / det;
		let countB = det2 / det;

		// If the target is an integer, we have a solution
		if (Number.isInteger(countA) && Number.isInteger(countB)) {
			answer += countA * 3 + countB;
		}
	}


	return answer;
}


/**
 * Parse the input into a usable format
 * Remember to set the @param and @returns values
 */
function parseInput(input) {

	let data = input.trim().split('\n\n').map(line => line.split('\n'));
	let pattern = /X\+\d+|Y\+\d+|X\=\d+|Y\=\d+/g;
	// For every item in the data array, extract the values from the string using the pattern
	data = data.map(item => {
		let temp = [];
		let obj = {a: [], b: [], target: {}};
		item = item.map(line => line.match(pattern))
		for (let i = 0; i < item.length; i++) {
			if (i === item.length - 1) {
				item[i].forEach(value => {
					let [key, val] = value.split('=');
					obj.target[key] = parseInt(val);
				})
			} else {
				let options = {}
				item[i].forEach(value => {
					let [key, val] = value.split('+');
					options[key] = parseInt(val);
				})
				temp.push(options);
			}
			obj.a = temp[0];
			obj.b = temp[1];
		}
		return obj;
	})
	return data;

}
// ************ End of Solution Functions ************
// ************ End of Main Logic Stuff ************


// ************ Helper Functions ************
/**
 * Check if a given coordinate is within the bounds of a grid
 * @param {Array} grid - The grid to check against
 * @param {Number} x - The x coordinate to check
 * @param {Number} y - The y coordinate to check
 * @returns {Boolean} - Whether the coordinate is within the grid
 */
function isWithinBounds(grid, x, y) {
	return x >= 0 && x < grid[0].length && y >= 0 && y < grid.length;
}

/**
 * Print a given grid to the console
 * @param {Array} grid - The grid to print
 */
function printGrid(grid, reverse = false) {
	let out = '';
	if (reverse) grid = grid.reverse();
	grid.forEach(row => {
		out += row.join('') + '\n';
	});
	console.log(out);
}

/**
 * Read the input file
 * @returns {String} - The input file as a string
 */
function readInputFile() {
	// Selector for input file is set by _EXAMPLE variable at the top
	return fs
		.readFileSync(_FILE)
		.toString()
}

/**
 * Pick the best time unit for a given time
 * @param {Number} time - The time to pick a unit for
 * @returns {Array} - An array with the time and the unit
 */
function pickTimeUnit(time) {
	if (time < 1) return [time * 1000, 'Âµs'];
	else if (time < 1000) return [time, 'ms'];
	else if (time < 60000) return [time / 1000, 's'];
	else if (time < 3600000) return [time / 60000, 'm'];
	else return [time / 3600000, 'h'];
}

/**
 * Log the answer to the console
 * @param {Number} answer - The answer to log
 * @param {Number} part - The part of the _DAY
 */
function logAnswer(answer, part) {
	let time = performance.now();
	time = time - _TIMERS[`part_${part}`];
	let time_unit = pickTimeUnit(time);
	let static_length = 31;
	let line_length = static_length + answer.toString().length + time_unit[0].toFixed(4).length;
	let output = chalk(chalk.bold.white('Part ' + part + ' [-'), chalk.yellow.bold(answer), chalk.white.bold('-] in'), chalk.green.bold('[- ' + (time_unit[0]).toFixed(4)), chalk.red(time_unit[1]), chalk.green.bold('-]'));
	console.info(chalk.bold.white('---'), output, chalk.bold.white('-'.repeat(Math.abs(_OUTPUT_LENGTH - line_length))));
}

function logBothAnswers(answers) {
	let time = performance.now();
	time = time - _TIMERS['both'];
	let static_length = 12;
	let time_unit = pickTimeUnit(time);
	answers.forEach((answer, i) => {
		let line_length = static_length + answer.toString().length + time_unit[0].toFixed(4).length;
		let output = chalk(chalk.bold.white('Part ' + (i + 1) + ' [-'), chalk.yellow.bold(answer), chalk.white.bold('-]'));
		console.info(chalk.bold.white('---'), output, chalk.bold.white('-'.repeat(Math.abs(_OUTPUT_LENGTH - line_length))));
	})
	static_length =35
	let line_length = static_length + time_unit[0].toFixed(4).length;
	let output = chalk(chalk.bold.white('Time For Both Parts: [-'), chalk.green.bold(time_unit[0].toFixed(4), chalk.red(time_unit[1]), chalk.white('-]')));
	console.info(chalk.bold.white('---'), output, chalk.bold.white('-'.repeat(Math.abs(_OUTPUT_LENGTH - line_length))));
}


/**
 * Print the day title plate to the console
 * @param {String} day - The day of the challenge
 */
function printDayTitlePlate(day) {
	console.log('\n');
	let title = `-= DAY ${day} =-`;
	let line_length = (_OUTPUT_LENGTH - (title.length) - 2) / 4;
	console.info(chalk.bold.blue('-'.repeat(Math.ceil(line_length)), `${chalk.bold.white(title)}`, '-'.repeat(line_length * 3)));
}

/**
 * Print the total time to the console
 */
function printTotalTime() {
	let time = performance.now();
	time = time - _TIMERS.global;
	let time_unit = pickTimeUnit(time);
	let static_length = 26;
	let line_length = static_length + time.toFixed(4).length;
	let output = chalk(chalk.bold.white('Total Time: [-'), chalk.green.bold(time_unit[0].toFixed(4), chalk.red(time_unit[1]), chalk.white('-]')));
	console.info(chalk.bold.white('---'), output, chalk.bold.white('-'.repeat(Math.abs(_OUTPUT_LENGTH - line_length))));
	console.log('\n');
}
// ************ End of Helper Functions ************