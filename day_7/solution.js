// ************ Initalization Stuff ************
import fs from 'fs'; // File system module
import chalk from 'chalk'; // Colorizes console output
import { Worker, isMainThread } from 'worker_threads'; // Worker threads for multi-threading

// Define Generic Global Variables
const _DAY = '07'; // Auto-generated by create.sh script. See README.md for details: https://github.com/frhel/AOC-2024/blob/main/README.md

const _FILE = process.argv[2] || 'in.txt'; // Default input file0 for problem input, 1 for example. Default is 1 for example
const _TIMERS = {'global': performance.now(), 'part_1': '', 'part_2': ''}; // Object to keep track of individual timers
const _OUTPUT_LENGTH = 60; // The length of the output line

printDayTitlePlate(_DAY); // Print a plate with the day of the challenge

// ************ End of Initalization ***********

// ************ Main Logic Stuff ************
let _REJECTS = [];
let _OPERATORS = ['+', '*'];
let _PART_1_ANSWER = 0;
let input = readInputFile();
let data = parseInput(input);
solvePart1(data);
solvePart2(data);
printTotalTime();

// ************ Solution Functions ************
/**
 * Solves part 1 of the challenge and logs the answer to the console
 * @param {Array} data - The parsed input data
 */
function solvePart1(data) {
	_TIMERS.part_1 = performance.now(); // Start the timer for part 1

	let answer = 0;

	// Iterate over the data and solve the problem
	for (let eq of data) {
		// Recurse through the data and find if the test is possible or not
		let res = recurseSolution(eq[0], eq[1][0], eq[1][1], eq[1].slice(2), 1);
		answer += res;
		// Any tests that return 0 are added to the _REJECTS array for part 2
		if (res === 0) _REJECTS.push(eq);
	}

	// Save the answer to the global variable for part 2
	_PART_1_ANSWER = answer;

	log_answer(answer, 1);

}

/**
 * Solves part 2 of the challenge and logs the answer to the console
 * @param {Array} data - The parsed input data
 */
function solvePart2(data) {
	_TIMERS.part_2 = performance.now(); // Start the timer for part 2

	_OPERATORS.push('||');

	let answer = 0;

	// Iterate over the rejects and solve the problem
	for (let reject of _REJECTS) {
		let res = recurseSolution(reject[0], reject[1].shift(), reject[1].shift(), reject[1], 2);
		answer += res; // Add the result to the answer. 0 if not found
	}
	// Add the answer from part 1 to the answer from part 2
	log_answer(answer + _PART_1_ANSWER, 2);
}


function recurseSolution(test, left, right, line, part) {

	let new_line = line.slice(1);
	// Create a new branch for each operation
	for (let operator of _OPERATORS) {
		let res = handleRecursion(test, left, right, line, new_line, part, operator);
		if (res === -1) continue;
		else if (res === test) return res;
	}

	return 0;
}

function handleRecursion(test, left, right, line, new_line, part, operator) {
	let outcome = performOperation(operator, left, right);
	// If the outcome is greater than the test, skip this branch as it will not be possible
	// to reduce the accumulated number to match the test
	if (outcome > test) return -1;
	if (outcome === test) return outcome;

	// If there are more numbers in the line, recurse through the rest of the line with the outcome added to the front
	if (line.length > 0) {
		let res = recurseSolution(test, outcome, line[0], new_line, part);
		if (res === test) return res;
	}
	return 0;
}

function performOperation(operator, left, right) {
	let outcome = 0;
	if (operator === '+') outcome = left + right;
	else if (operator === '*') outcome = left * right;
	else if (operator === '||') outcome = Number(`${left}${right}`);
	return outcome;
}



/**
 * Parse the input into a usable format
 * Remember to set the @param and @returns values
 */
function parseInput(input) {
	// Returns [test, [numbers]]
	return input.split('\n').map((line) => line.split(' ')).map((line) => [Number(line[0].split(':')[0]), [...line.slice(1)].map((el) => Number(el))]);

}
// ************ End of Solution Functions ************
// ************ End of Main Logic Stuff ************


// ************ Helper Functions ************
/**
 * Read the input file
 * @returns {String} - The input file as a string
 */
function readInputFile() {
	// Selector for input file is set by _EXAMPLE variable at the top
	return fs
		.readFileSync(_FILE)
		.toString()
}

function pickTimeUnit(time) {
	if (time < 1) return [time * 1000, 'Âµs'];
	else if (time < 1000) return [time, 'ms'];
	else if (time < 60000) return [time / 1000, 's'];
	else if (time < 3600000) return [time / 60000, 'm'];
	else return [time / 3600000, 'h'];
}

/**
 * Log the answer to the console
 * @param {Number} answer - The answer to log
 * @param {Number} part - The part of the _DAY
 */
function log_answer(answer, part) {
	let time = performance.now();
	time = time - _TIMERS[`part_${part}`];
	let time_unit = pickTimeUnit(time);
	let static_length = 31;
	let line_length = static_length + answer.toString().length + time_unit[0].toFixed(4).length;
	let output = chalk(chalk.bold.white('Part ' + part + ' [-'), chalk.yellow.bold(answer), chalk.white.bold('-] in'), chalk.green.bold('[- ' + (time_unit[0]).toFixed(4)), chalk.red(time_unit[1]), chalk.green.bold('-]'));
	console.info(chalk.bold.white('---'), output, chalk.bold.white('-'.repeat(Math.abs(_OUTPUT_LENGTH - line_length))));
	console.info(chalk.bold.blue('-'.repeat(_OUTPUT_LENGTH)));
}

/**
 * Print the day title plate to the console
 * @param {String} day - The day of the challenge
 */
function printDayTitlePlate(day) {
	console.log('\n');
	let title = `-= DAY ${day} =-`;
	let line_length = (_OUTPUT_LENGTH - (title.length) - 2) / 4;
	console.info(chalk.bold.blue('-'.repeat(Math.ceil(line_length)), `${chalk.bold.white(title)}`, '-'.repeat(line_length * 3)));
}

/**
 * Print the total time to the console
 */
function printTotalTime() {
	let time = performance.now();
	time = time - _TIMERS.global;
	let time_unit = pickTimeUnit(time);
	let static_length = 26;
	let line_length = static_length + time.toFixed(4).length;
	let output = chalk(chalk.bold.white('Total Time: [-'), chalk.green.bold(time_unit[0].toFixed(4), chalk.red(time_unit[1]), chalk.white('-]')));
	console.info(chalk.bold.white('---'), output, chalk.bold.white('-'.repeat(Math.abs(_OUTPUT_LENGTH - line_length))));
	console.info(chalk.bold.blue('-'.repeat(_OUTPUT_LENGTH)));
	console.log('\n');
}
// ************ End of Helper Functions ************
