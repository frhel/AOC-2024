// ************ Initalization Stuff ************
import fs from 'fs'; // File system module
import chalk from 'chalk'; // Colorizes console output

// Define Generic Global Variables
const _DAY = '09'; // Auto-generated by create.sh script. See README.md for details: https://github.com/frhel/AOC-2024/blob/main/README.md

const _FILE = process.argv[2] || 'in.txt'; // Default input file0 for problem input, 1 for example. Default is 1 for example
const _TIMERS = {'global': performance.now(), 'part_1': '', 'part_2': ''}; // Object to keep track of individual timers
const _OUTPUT_LENGTH = 50; // The length of the output line

printDayTitlePlate(_DAY); // Print a plate with the day of the challenge

// ************ End of Initalization ***********

// ************ Main Logic Stuff ************
let input = readInputFile();
let data = parseInput(input);
solvePart1(data);
solvePart2(data);
printTotalTime();

// ************ Solution Functions ************
/**
 * Solves part 1 of the challenge and logs the answer to the console
 * @param {Array} data - The parsed input data
 */
function solvePart1(data) {
	_TIMERS.part_1 = performance.now(); // Start the timer for part 1

	let answer = 0;
	let files = data.slice();

	let moved = 0;
	left:
	for (let i = 0; i < files.length; i++) {
		if (files[i] !== '.') continue left;
		right:
		for (let j = files.length - 1 - moved; j > i; j--) {
			if (files[j] <= files[i]) continue left;
			if (files[j] === '.') {
				moved++;
				continue right;
			}
			files[i] = files[j]
			files[j] = '.';
			moved++;
		}
	}

	for (let i = 0; i < files.length; i++) {
		if (files[i] === '.') continue;
		answer += files[i] * i;
	}

	log_answer(answer, 1);
}

/**
 * Solves part 2 of the challenge and logs the answer to the console
 * @param {Array} data - The parsed input data
 */
function solvePart2(data) {
	_TIMERS.part_2 = performance.now(); // Start the timer for part 2

	// Code to solve part 2 goes here
	let answer = 0;
	let files = data.slice();

	let empty = [];
	let full = [];
	let ei = -1;
	let fi = -1;
	for (let i = files.length - 1; i >= 0; i--) {
		if (files[i] === '.') {
			empty.push([]);
			ei++;
			while (files[i] === '.') {
				empty[ei].push(i);
				i--;
			}
		}
	}
	let curr = '';
	for (let i = 0; i < files.length - 1; i++) {
		if (files[i] === '.') continue;
		if (files[i] !== curr) {
			curr = files[i];
			full.push([curr, []]);
			fi++;
			while (files[i] === curr) {
				full[fi][1].push(i);
				i++;
			}
		}
		i--;
	}


	compact:
	while(full.length > 0) {
		let f = full.pop();
		if (f[1][0] < empty.at(-1)[0]) break compact;

		let stack = [];
		e:
		while (empty.length > 0) {
			stack.push(empty.pop());
			let e = stack.at(-1);
			if (e.at(-1) > f[1][0]) break e;
			if (f[1].length <= e.length) {

				for (let i = 0; i < f[1].length; i++) {
					files[e.pop()] = f[0];
					files[f[1][i]] = '.';
				}
				if (e.length === 0) stack.pop();
				break e;
			}
		}
		while (stack.length > 0) {
			let s = stack.pop();
			if (s.length === 0) continue;
			empty.push(s);
		}



	}

	for (let i = 0; i < files.length; i++) {
		if (files[i] === '.') continue;
		answer += files[i] * i;
	}

	log_answer(answer, 2);
}


/**
 * Parse the input into a usable format
 * Remember to set the @param and @returns values
 */
function parseInput(input) {

	let data = input.split('').map(digits => Number(digits));

	let files = [];
	let file_id = 0;
	for (let i = 0; i < data.length; i++) {
		if (i % 2 === 0) {
			for (let j = 0; j < data[i]; j++) {
				files.push(file_id);
			}
			file_id++;
		} else {
			for (let j = 0; j < data[i]; j++) {
				files.push('.');
			}
		}
	}
	return files;

}
// ************ End of Solution Functions ************
// ************ End of Main Logic Stuff ************


// ************ Helper Functions ************
/**
 * Check if a given coordinate is within the bounds of a grid
 * @param {Array} grid - The grid to check against
 * @param {Number} x - The x coordinate to check
 * @param {Number} y - The y coordinate to check
 * @returns {Boolean} - Whether the coordinate is within the grid
 */
function isWithinBounds(grid, x, y) {
	return x >= 0 && x < grid[0].length && y >= 0 && y < grid.length;
}

/**
 * Print a given grid to the console
 * @param {Array} grid - The grid to print
 */
function printGrid(grid, reverse = false) {
	let out = '';
	if (reverse) grid = grid.reverse();
	grid.forEach(row => {
		out += row.join('') + '\n';
	});
	console.log(out);
}

/**
 * Read the input file
 * @returns {String} - The input file as a string
 */
function readInputFile() {
	// Selector for input file is set by _EXAMPLE variable at the top
	return fs
		.readFileSync(_FILE)
		.toString()
}

function pickTimeUnit(time) {
	if (time < 1) return [time * 1000, 'Âµs'];
	else if (time < 1000) return [time, 'ms'];
	else if (time < 60000) return [time / 1000, 's'];
	else if (time < 3600000) return [time / 60000, 'm'];
	else return [time / 3600000, 'h'];
}

/**
 * Log the answer to the console
 * @param {Number} answer - The answer to log
 * @param {Number} part - The part of the _DAY
 */
function log_answer(answer, part) {
	let time = performance.now();
	time = time - _TIMERS[`part_${part}`];
	let time_unit = pickTimeUnit(time);
	let static_length = 31;
	let line_length = static_length + answer.toString().length + time_unit[0].toFixed(4).length;
	let output = chalk(chalk.bold.white('Part ' + part + ' [-'), chalk.yellow.bold(answer), chalk.white.bold('-] in'), chalk.green.bold('[- ' + (time_unit[0]).toFixed(4)), chalk.red(time_unit[1]), chalk.green.bold('-]'));
	console.info(chalk.bold.white('---'), output, chalk.bold.white('-'.repeat(Math.abs(_OUTPUT_LENGTH - line_length))));
	console.info(chalk.bold.blue('-'.repeat(_OUTPUT_LENGTH)));
}

/**
 * Print the day title plate to the console
 * @param {String} day - The day of the challenge
 */
function printDayTitlePlate(day) {
	console.log('\n');
	let title = `-= DAY ${day} =-`;
	let line_length = (_OUTPUT_LENGTH - (title.length) - 2) / 4;
	console.info(chalk.bold.blue('-'.repeat(_OUTPUT_LENGTH)));
	console.info(chalk.bold.blue('-'.repeat(Math.ceil(line_length)), `${chalk.bold.white(title)}`, '-'.repeat(line_length * 3)));
	console.info(chalk.bold.blue('-'.repeat(_OUTPUT_LENGTH)));
}

/**
 * Print the total time to the console
 */
function printTotalTime() {
	let time = performance.now();
	time = time - _TIMERS.global;
	let time_unit = pickTimeUnit(time);
	let static_length = 26;
	let line_length = static_length + time.toFixed(4).length;
	let output = chalk(chalk.bold.white('Total Time: [-'), chalk.green.bold(time_unit[0].toFixed(4), chalk.red(time_unit[1]), chalk.white('-]')));
	console.info(chalk.bold.white('---'), output, chalk.bold.white('-'.repeat(Math.abs(_OUTPUT_LENGTH - line_length))));
	console.info(chalk.bold.blue('-'.repeat(_OUTPUT_LENGTH)));
	console.log('\n');
}
// ************ End of Helper Functions ************